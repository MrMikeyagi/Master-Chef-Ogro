////////////////////////////////////////////////
//moviecube script library
////////////////////////////////////////////////


///////////////////////////////////////////////
//various helper commands 
///////////////////////////////////////////////

//creates a string from a aribitary number of given args 
concatargs = [
  s = "";
  loop i $numargs [
    s = (concat $s (getalias  (concatword "arg" (+ $i 1) ) ) );
  ]
  result $s;
]

///////////////////////////////////////////////
//Menu Definitions 
///////////////////////////////////////////////

m_msg_alert = "";

newgui m_menu_alert [
  guitext $m_msg_alert
  guibar 
  guilist [ guibutton close cleargui ]
] "Alert"

m_actor_name = "";
m_actor_ent_attr1 = "";

//ToDo test if m_actor_name > 0
newgui m_menu_new_actor [
  guitext "add a unique name for the actor"
  guilist [
    guitext "name: "
    guifield m_actor_name 15 [ if (< (m_cmd_list_get_idx m_list_actions $m_actor_name) 0) [ addactor $m_actor_ent_attr1 $m_actor_name ] [ echo "an actor with name:" $m_actor_name "already exist"; delent; ]; m_actor_name = ""; m_actor_ent_attr1 = ""; cleargui; ]
  ]
] "New Actor"

newgui m_menu_addcue [
  guistayopen [
    guitext (concat "assign new actions to actor:" $m_actor_name)
    guibar
    guititle "choose action"
	guilist [
    guilist [
      guibutton "model " [ m_cue_cmd = "actormodel"; ]
      guibutton "move " [ m_cue_cmd = "actormove"; ]
		  guibutton "wait" [ m_cue_cmd = "actoridle"; ]
	  ]
		guibar
    guilist [
      guibutton "speed " [ m_cue_cmd = "actorspeed"; ]
      guibutton "anim " [ m_cue_cmd = "actoranim"; ]    
      guibutton "tp    " [ m_cue_cmd = "actortp"; ]
    ]
		guibar
		guilist [
	    guibutton "look " [ m_cue_cmd = "actorlook"; ]
	    guibutton "fly " [ m_cue_cmd = "actorfly"; ]
	    guibutton "evalstr " [ m_cue_cmd = "actoreval"; ]
	   ]
	]
    guibar
    guititle "set argument"
	guifield m_cue_arg1 25 []
    guibar
    guilist [ 
      guitext (format "%1 %2 %3  " $m_cue_cmd $m_actor_name $m_cue_arg1)
      guibutton "add " (format "%1 %2 %3" $m_cue_cmd $m_actor_name $m_cue_arg1)
      guibutton "run " [runcue $m_actor_name; cleargui;]
    ]
  ]
] "Actor Cue"

newgui m_menu_actor_ents [
  guititle "add actors or waypoints"
  if (&& (= $editing 1) (! (= (havesel) 0))) [ guibutton "new actor" [ newactor ]; guibutton "new waypoint" [ newent waypoint ] ] [ guitext "to add actors or waypoits,"; guitext "enter editmode and select position first" ]
  guitab "run"
  i = 0;
  guititle "run one of the actors"
  loop i (listlen $m_list_actions) [ _m_btn = (at $m_list_actions $i); _m_btn_cmd = (concat runcue $_m_btn); guibutton $_m_btn $_m_btn_cmd ]
  guibar
  guibutton "run all" [ i = 0; loop i (listlen $m_list_actions) [ runcue (at $m_list_actions $i) ]]
  
  guitab "edit cue" 
  i = 0
  guititle "edit one of the actors"
  loop i (listlen $m_list_actions) [ _m_btn = (at $m_list_actions $i); _m_btn_cmd = (concat addcue $_m_btn); guibutton $_m_btn $_m_btn_cmd ]
] "Edit Actors"


///////////////////////////////////////////////
//Menu Commands 
///////////////////////////////////////////////
//gets a bunch of args, generates a alert msg
m_menu_alert_show = [
  m_msg_alert = $arg1
  showgui m_menu_alert
]

////////////////////////////////////////////////
//Action Storage / lists
////////////////////////////////////////////////

//stores all action id'd connected to actor
m_list_actions = []

//adds a new action into the list: "m_list_action" and
//inits new empty alias scripts and properties data

//generic lists created by scripts (last part actionid is the id stored in m_list_actions):
//this will be saved inside the map:
//  m_list_script_id_actionid: id string for action - related to actorname
//  m_list_prop_id_actionid: id string of a property name
//  m_list_prop_value_actionid: value of a property (integer)

///////////////////////////////////////////////
//Commands (related to lists)
///////////////////////////////////////////////

//called when actor is spawning
m_cmd_add_action = [
  if (= (m_cmd_list_add_entry m_list_actions $arg1) 1) [ alias (concatword m_list_script_id_ $arg1) []; alias (concatword m_list_script_alias_ $arg1) [], alias (concatword m_list_prop_id_ $arg1) []; alias (concatword m_list_prop_value_ $arg1) []; result 1;] [ result 0; ]
]

//called when actor will be deleted
m_cmd_del_action = [
  if (> (m_cmd_list_get_idx m_list_actions $arg1) -1) [ m_cmd_list_del m_list_actions $arg1 ]
]

//usage: m_cmd_list_get_idx S1 S2 - get index of a listelement S2 of list S1, returns index or -1
m_cmd_list_get_idx = [
  n = (listlen (getalias $arg1));
  c = -1; 
  loop i $n [ 
    if (= (strcmp $arg2 (at (getalias $arg1) $i)) 1) [ 
    c = $i;
    ] 
  ]
  result $c;
]

//usage: m_cmd_list_add S1 S2 - adds a entry S2 to list S1 (dont check for duplicate entries)
m_cmd_list_add = [ 
  if (= (listlen (getalias $arg1)) 0) [ $arg1 = (concatword (getalias $arg1) $arg2)] [ $arg1 = (concat (getalias $arg1) $arg2) ]
]

//usage: m_cmd_list_del S1 S2 - delete a entry S2 from a list S1 
m_cmd_list_del = [
  idx = (m_cmd_list_get_idx $arg1 $arg2);
  _tmp = []
  if (> $idx -1) [
    loop i (listlen (getalias $arg1)) [
      if (!= $i $idx) [
        if (= (listlen _tmp) 0) [_tmp = (concatword $_tmp (at (getalias $arg1) $i) ) ] [_tmp = (concat $_tmp (at (getalias $arg1) $i) ) ] 
      ] 
    ] 
  ]
  $arg1 = $_tmp
]

//usage: m_cmd_list_add_entry S1 S2 - adds a entry S2 to list S1 (checks for duplicates)
m_cmd_list_add_entry = [
  echo m_cmd_list_add_entry $arg1 $arg2
  if (< (m_cmd_list_get_idx $arg1 $arg2) 0) [ m_cmd_list_add $arg1 $arg2; result 1;] [ m_menu_alert_show (concatargs "entry:" $arg2 "already exists"); result 0]; 
]

//usage: m_cmd_list_add_script [action] [script_id] [body]
//registers a new script for the given action 
m_cmd_list_add_script = [
  if (< (m_cmd_list_get_idx m_list_actions $arg1) 0) [ result 0; ] [ if (= (m_cmd_list_add_entry (concatword "m_list_script_id_" $arg1) $arg2) 1) [ m_cmd_list_add (concatword "m_list_script_alias_" $arg1) (concatword "m_script_" $arg1 "_" $arg2); alias (concatword "m_script_" $arg1 "_" $arg2) $arg3; ] ]
]

//usage: m_cmd_list_del_script [action] [script_id]
m_cmd_list_del_script =  [ 
  m_cmd_list_del (concatword "m_list_script_id_" $arg1) $arg2
  m_cmd_list_del (concatword "m_list_script_alias_" $arg1) $arg2  
]

//helper functions inside scripts for properties etc.
//m_cmd_get_properties = [ getalias arg1 ] - returns the propertie list of the actual action

//usage: m_cmd_run [action] [script_id]
m_cmd_run = [
  idx = (m_cmd_list_get_idx (concat "m_list_script_id_" $arg1) $arg2); 
  if (> $idx -1) [ 
    cmd = (at (concatword "m_list_script_alias_" $arg1) $idx); 
    cmd $arg1; cmd = []
  ]    
]


///////////////////////////////////////////////
//public Actor Commands 
///////////////////////////////////////////////

newactor = [
  m_actor_ent_attr1 = (newentactor);
  showgui m_menu_new_actor;
]

addcue = [
  if (> (m_cmd_list_get_idx m_list_actions $arg1) -1) [
    m_actor_name = $arg1;
    m_cue_cmd = "";
    m_cue_arg1 = "";
    m_cue_arg2 = "";
    showgui m_menu_addcue;
  ][ echo "addcue: actor" $arg1 "not found"; ]
]

models = "rc rc/blue rc/pink rc/red ogre ogre/blue ogre/red rpg/characters/dragon rpg/characters/mman rpg/characters/npcman rpg/characters/golem rpg/characters/grizzly rpg/characters/horse rpg/characters/rat rpg/characters/snagon rpg/characters/wolf"

newspeed = 100
newanim = 0

newgui playerprops [
	guitext "Select a model for the player"
	guibar
	guistayopen [
		guilist [
			loop i (+ 1 (div (listlen $models) 14)) [
				guilist [
					loop j (min (- (listlen $models) (* 14 $i)) 14) [
						guibutton (at $models (+ $j (* 14 $i))) (format "playermodel %1" (at $models (+ $j (* 14 $i))))
					]
				]
			]
		]
	]
	guitab "other"
	guilist [
		guilist [
			guitext "Movement speed"
			guitext "Animation number"
		]
		guilist [
			guifield newspeed 4 [playerspeed $newspeed]
			guifield newanim 4 [playeranimation $newanim]
		]
	]
]

